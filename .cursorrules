# Cursor AI Rules for ULM Project

## ⚠️ CRITICAL: Read Before Starting ANY Work

### 🤖 Mandatory First Steps for Every Session:

**At the START of EVERY new session, you MUST execute these steps IN ORDER:**

0. **📖 READ the project README first:**
   ```
   ACTION: Use the read_file tool to read:
   README.md
   
   The README contains a critical "⚠️ לסוכני AI - קרא קודם כל דבר אחר!" section at the top.
   READ THIS SECTION FIRST to understand the mandatory workflow.
   ```

1. **📚 READ the Development Guidelines component:**
   ```
   ACTION: Use the read_file tool to read:
   frontend/react/src/components/DevelopmentGuidelines/DevelopmentGuidelines.tsx
   
   This file contains 16 detailed guidelines with code examples and best practices.
   READ THE ENTIRE FILE to understand all guidelines before starting any work.
   ```
   - **Also viewable at:** https://ulm-rct.ovu.co.il/dev-guidelines
   - **Contains:** All deployment, architecture, coding, database, and design rules

2. **📝 ASK USER to share Development Journal context:**
   ```
   ACTION: Tell the user:
   "לפני שאתחיל לעבוד, בבקשה פתח את https://ulm-rct.ovu.co.il/dev-journal 
   ושתף אותי עם הסשנים האחרונים (אם יש) כדי שאבין את ההקשר."
   ```
   - **Purpose:** Understand previous development sessions and their outcomes
   - **Location:** https://ulm-rct.ovu.co.il/dev-journal

3. **📖 IDENTIFY the relevant guidelines for your specific task:**
   - 🚀 **Deployment** (Frontend → public/, Backend restart process)
   - 🗄️ **Database** (Migrations, SQLAlchemy Models)
   - 🏗️ **Architecture** (API Endpoints, Axios Interceptors, API Logging)
   - 💻 **Coding** (Response Serialization, TypeScript, i18n, Git Workflow, Error Handling)
   - 🎨 **Design System** (CRITICAL! CSS Variables only, no hardcoded colors/gradients)
   - 🔒 **Security** (Authentication, Authorization)

---

## 🎨 Design System Rules (CRITICAL!)

**ALWAYS use CSS Variables - NEVER hardcoded colors!**

### ✅ CORRECT:
```css
.my-component {
  background: var(--card-background);
  color: var(--text-primary);
  border: 2px solid var(--border-color);
}

.my-component.dark {
  --background-color: #1a1a2e;
  --card-background: #16213e;
  --text-primary: #eee;
  --border-color: #0f3460;
}

.my-component.light {
  --background-color: #f5f7fa;
  --card-background: #ffffff;
  --text-primary: #2c3e50;
  --border-color: #e1e8ed;
}
```

### ❌ WRONG:
```css
.my-component {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}
```

**Available CSS Variables:**
- `--background-color` / `--bg-color`
- `--card-background` / `--surface-color`
- `--text-primary` / `--text-color`
- `--text-secondary`
- `--border-color`
- `--primary-blue` / `--primary-color` (#2563eb or #3b82f6)
- `--hover-bg`

**Reference existing components:**
- `frontend/react/src/components/DevJournal/DevJournal.css`
- `frontend/react/src/components/APILogs/APILogs.css`
- `frontend/react/src/components/DatabaseViewer/DatabaseViewer.css`

---

## 🚀 Deployment Rules (CRITICAL!)

### Frontend Deployment:
```bash
# Server: ploi@64.176.173.105
# SSH Key: ~/.ssh/ovu_key

cd /home/noam/projects/dev/ovu-ulm/frontend/react
npm run build
scp -i ~/.ssh/ovu_key -r dist/* ploi@64.176.173.105:/home/ploi/ulm-rct.ovu.co.il/

# CRITICAL: Copy to public/ directory (Nginx serves from there!)
ssh -i ~/.ssh/ovu_key ploi@64.176.173.105 "cp -rf /home/ploi/ulm-rct.ovu.co.il/*.html /home/ploi/ulm-rct.ovu.co.il/public/ && cp -rf /home/ploi/ulm-rct.ovu.co.il/assets/* /home/ploi/ulm-rct.ovu.co.il/public/assets/"
```

### Backend Deployment:
```bash
# Server: ploi@64.176.171.223
# SSH Key: ~/.ssh/ovu_key

cd /home/noam/projects/dev/ovu-ulm/backend
scp -i ~/.ssh/ovu_key -r app/ ploi@64.176.171.223:/home/ploi/ovu-ulm/backend/

# Restart service
ssh -i ~/.ssh/ovu_key ploi@64.176.171.223 "cd /home/ploi/ovu-ulm/backend && pkill -f 'uvicorn.*ulm' && nohup venv/bin/uvicorn app.main:app --host 0.0.0.0 --port 8001 > /dev/null 2>&1 &"
```

---

## 🗄️ Database Rules

### Migrations:
1. Create SQL file in `backend/migrations/`
2. Run: `psql -h 64.176.171.223 -U ulm_user -d ulm_db -f migrations/xxx.sql`
3. Update SQLAlchemy models in `backend/app/models/`
4. MUST use `IF NOT EXISTS` for safety

### API Response Serialization:
**CRITICAL:** When adding new DB columns, you MUST explicitly include them in API responses!

```python
# ❌ WRONG - New fields won't appear in API
return {"id": log.id, "timestamp": log.timestamp}

# ✅ CORRECT - Explicitly include all fields
return {
    "id": log.id,
    "timestamp": log.timestamp,
    "origin": log.origin,  # New field
    "referer": log.referer,  # New field
    "app_source": log.app_source  # New field
}
```

---

## 💻 Coding Standards

### TypeScript Interfaces:
When backend adds fields, frontend MUST update interfaces:
```typescript
interface LogEntry {
  id: number;
  timestamp: string;
  // New fields:
  origin?: string;
  referer?: string;
  app_source?: string;
}
```

### Multi-language Support (i18n):
System supports 3 languages: Hebrew, English, Arabic.
EVERY UI text MUST be translated!

```typescript
const t = {
  he: { title: "כותרת בעברית" },
  en: { title: "Title in English" },
  ar: { title: "العنوان بالعربية" }
};
```

### Git Workflow:
```bash
git status  # Check before changes
git diff    # Review changes
# Make changes
git add <files>
git commit -m "Clear description in Hebrew or English"
git push
```

---

## 🔒 Security & Authentication

- JWT Access Token: 15 minutes
- Refresh Token: 7 days
- Use `require_auth`, `require_admin`, `require_superadmin` dependencies
- AuthContextMiddleware extracts user from JWT → `request.state.user`
- APILoggerMiddleware must run AFTER AuthContextMiddleware

---

## 📊 System Information

**Frontend:**
- React 18 + TypeScript + Vite
- 3 languages (he/en/ar) with RTL support
- CSS Variables for theming
- Axios with interceptors for auth & logging

**Backend:**
- FastAPI + PostgreSQL
- JWT authentication
- API Logging middleware
- SQLAlchemy ORM

**Production URLs:**
- Frontend: https://ulm-rct.ovu.co.il
- Backend API: http://64.176.171.223:8001
- Dev Guidelines: https://ulm-rct.ovu.co.il/dev-guidelines
- Dev Journal: https://ulm-rct.ovu.co.il/dev-journal

---

## 📝 END OF SESSION - Mandatory Documentation

**At the END of EVERY session, you MUST document 3 things:**

### 1. Create Session Summary
Use Python script to add session to database:
```python
# Create session with: title, summary (detailed!), instructions_for_next
```

### 2. Document All Steps (development_steps)
Each user interaction = separate step:
```python
# For each step: step_number, user_prompt, ai_understanding, ai_actions, result
```

### 3. Document System State (system_states)
```python
# state_at_start: Initial state (files, features, commits, deployments)
# state_at_end: Final state (new/updated files, commits, deployments)
# changes_summary: Summary of all changes
```

**Example structure:**
```
state_at_start:
- Issue: columns not showing in UI
- Files: api_logs.py (not returning new fields)
- Git: commit abc123
- Sessions: 1

state_at_end:
- Fixed: columns showing ✅
- New page: /dev-guidelines ✅
- Files: + DevelopmentGuidelines.tsx, ~ api_logs.py
- Git: 4 new commits (abc123 → def456)
- Sessions: 2
```

**This documentation is NOT optional!**

---

## ⚠️ Remember:

1. **Check /dev-guidelines FIRST** before ANY work
2. **Review /dev-journal** for previous session context
3. **Use CSS Variables ONLY** - no hardcoded colors
4. **Deploy to public/** for frontend (Nginx requirement)
5. **Include new fields in API responses** explicitly
6. **Update TypeScript interfaces** when backend changes
7. **Support 3 languages** for all UI text
8. **Commit after successful deployment**
9. **Document session END** - session, steps, system state (MANDATORY!)

**This is NOT optional - it's a mandatory part of the development process!**
