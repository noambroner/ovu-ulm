# ULM Project - Cursor Rules for AI Assistant

## 🤖 MANDATORY: Session Start Checklist

### At START of Every Session - MUST DO THIS FIRST:

**STEP 1: Get Complete Project Context**
```bash
curl -s https://ulm-rct.ovu.co.il/api/v1/dev-journal/ai/project-context
```

**STEP 2: Present to User**
You MUST show the user:
```
╔═══════════════════════════════════════════════════════╗
║ 🎯 ULM Development Session #{current_session_number} ║
╠═══════════════════════════════════════════════════════╣
║                                                        ║
║ 📋 Previous Session: #{latest_session.id}            ║
║    Title: {latest_session.title}                      ║
║    Duration: {duration} hours                         ║
║                                                        ║
║ 📝 Tasks for This Session:                           ║
║    {instructions_for_next - each line}               ║
║                                                        ║
║ 🏗️ Architecture:                                      ║
║    - Frontend: 64.176.173.105 (React/TypeScript)     ║
║    - Backend: 64.176.171.223 (FastAPI/Python)        ║
║    - Database: PostgreSQL 17 (13 tables)             ║
║                                                        ║
║ 🔧 Tech Stack:                                        ║
║    Backend: FastAPI + SQLAlchemy async + JWT         ║
║    Frontend: React 18 + TypeScript + RTL             ║
║                                                        ║
║ 📊 Current Features:                                  ║
║    {list current_features}                            ║
║                                                        ║
║ ⚙️ Coding Standards:                                  ║
║    - Backend: async/await, snake_case, type hints    ║
║    - Frontend: hooks, camelCase, RTL support         ║
║                                                        ║
╚═══════════════════════════════════════════════════════╝

Ready to start! What would you like to work on first?
```

**STEP 3: Confirm Understanding**
Wait for user to acknowledge before starting work.

### During Session:

- Track each major step as you work
- Document: user_prompt, ai_understanding, ai_actions, result

### At END of Session:

1. Create comprehensive session summary
2. Document all steps in database
3. Record system state (before/after)
4. Write SESSION_{N}_SUMMARY.md file
5. Commit everything to GitHub

---

## 📋 Project Standards

### Code Style
- **Backend**: Python with FastAPI, async/await patterns
- **Frontend**: React with TypeScript, functional components with hooks
- **Database**: PostgreSQL with SQLAlchemy ORM
- **API**: RESTful with comprehensive OpenAPI documentation

### Naming Conventions
- **Files**: snake_case for Python, PascalCase for React components
- **Functions**: snake_case in Python, camelCase in TypeScript
- **Database**: snake_case for tables and columns

### Documentation
- Add docstrings to all functions
- Include type hints in Python
- Add JSDoc comments for complex TypeScript functions
- Update API documentation when adding endpoints

---

## 🗄️ Database

**Current Tables (13):**
1. users
2. roles  
3. refresh_tokens
4. password_resets
5. token_settings
6. scheduled_user_actions
7. sessions
8. api_logs_backend
9. api_logs_frontend
10. development_sessions
11. development_steps
12. system_states
13. (dynamic access via DB Viewer)

---

## 🎯 Git Workflow

1. **Commit often** with descriptive messages
2. **Push to main** after testing
3. **Deploy manually** to production server
4. **Tag releases** when appropriate

---

## 📦 Deployment

**Production Server**: 64.176.171.223 (via SSH key)
- Backend: Port 8001 (uvicorn)
- Frontend: Nginx serving static files
- Database: PostgreSQL

**Deployment Steps:**
1. Build frontend: `npm run build`
2. Upload frontend: `scp dist/* to server`
3. Upload backend: `scp *.py to server`
4. Restart: `pkill uvicorn && start uvicorn`

---

## 🌐 Multi-language Support

- **Hebrew** (primary)
- **English**
- **Arabic**

All UI components must support RTL and LTR.

---

## Reference Files

- **AI Guide**: `AI_SESSION_GUIDE.md`
- **Session Example**: `SESSION_1_SUMMARY.md`
- **API Docs**: `/api/v1/docs` (Swagger UI)

